setwd("C:/Git/APU/Lab2")
install.packages("data.tree")
install.packages("formattable")
install.packages("DiagrammeR")
install.packages("C:/Users/mtesluk/Desktop/studia/Apu/Lab2/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
library(ahp)
library(data.tree)
library(formattable)
library(DiagrammeR)
install.packages("C:/Git/APU/Lab2/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
library(ahp)
library(ahp)
library(data.tree)
library(formattable)
library(DiagrammeR)
library(ahp)
ahpFile <- system.file("extdata", "dane.ahp", package="ahp")
daneAhp <- Load(ahpFile)
Calculate(daneAhp)
Analyze(daneAhp)
AnalyzeTable(daneAhp)
PrioritiesFromPairwiseMatrixMeanNormalization(daneAhp)
ahpFile <- system.file("extdata", "lodowki.ahp", package="ahp")
daneAhp <- Load(ahpFile)
Calculate(daneAhp)
Analyze(daneAhp)
AnalyzeTable(daneAhp)
PrioritiesFromPairwiseMatrixMeanNormalization(daneAhp)
setwd("C:/Git/APU/Lab2")
ahpFile <- system.file("extdata", "lodowki.ahp", package="ahp")
daneAhp <- Load(ahpFile)
ahpFile <- system.file("extdata", "lodowki.ahp", package="ahp")
daneAhp <- Load(ahpFile)
Calculate(daneAhp)
Analyze(daneAhp)
AnalyzeTable(daneAhp)
PrioritiesFromPairwiseMatrixMeanNormalization(daneAhp)
ahpFile <- system.file("extdata", "lodowki.ahp", package="ahp")
daneAhp <- Load(ahpFile)
setwd("C:/Git/APU/Lab2")
install.packages("data.tree")
install.packages("formattable")
install.packages("DiagrammeR")
install.packages("C:/Git/APU/Lab2/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
library(data.tree)
library(formattable)
library(DiagrammeR)
library(ahp)
ahpFile <- system.file("extdata", "lodowki.ahp", package="ahp")
daneAhp <- Load(ahpFile)
Calculate(daneAhp)
Analyze(daneAhp)
AnalyzeTable(daneAhp)
PrioritiesFromPairwiseMatrixMeanNormalization(daneAhp)
install.packages("data.tree")
install.packages("formattable")
install.packages("DiagrammeR")
library(data.tree)
library(formattable)
library(DiagrammeR)
library(ahp)
ahpFile <- system.file("extdata", "lodowki.ahp", package="ahp")
ahpFile <- system.file("extdata", "lodowki.ahp", package="ahp")
daneAhp <- Load(ahpFile)
setwd("C:/Git/APU/Lab2")
myAhp <- LoadFile("ahp.txt")
remove.packages("ahp", lib="~/R/win-library/4.1")
devtools::install_github("gluc/ahp", build_vignettes = TRUE)
install.packages("C:/Git/APU/Lab2/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
setwd("C:/Git/APU/Lab2")
install.packages("data.tree")
install.packages("data.tree")
install.packages("formattable")
install.packages("DiagrammeR")
install.packages("formattable")
install.packages("C:/Git/APU/Lab2", repos=NULL, type = "source")
install.packages("C:/Git/APU/Lab2/ahp_0.2.12.tar.gz", repos=NULL, type = "source")
library(ahp)
library(data.tree)
library(formattable)
library(DiagrammeR)
ahpFileImport  <- system.file("extdata", "apu2.ahp", package="ahp")
ahpData <- ahp::Load(ahpFileImport)
ahpFileImport  <- system.file("extdata", "apu2.ahp", package="ahp")
ahpData <- ahp::Load(ahpFileImport)
ahpFileImport = system.file("extdata", "apu2.ahp", package="ahp")
ahpData = ahp::Load(ahpFileImport)
ahpFileImport <- as.character(ahpFileImport)
ahpData = ahp::Load(ahpFileImport)
ahpFileImport = readChar(fileName, file.info(apu2.ahp)$size)
ahpFileImport = readChar(apu2.ahp, file.info(apu2.ahp)$size)
setwd("C:/Git/APU/Lab2")
ahpFileImport = readChar(apu2.ahp, file.info(apu2.ahp)$size)
ahpFileImport = readChar("apu2.ahp", file.info("apu2.ahp")$size)
ahpFileImport = readChar("C:/Git/APU/Lab2/apu2.ahp", file.info("C:/Git/APU/Lab2/apu2.ahp")$size)
install.packages("readr")
library(readr)
ahpFileImport  <- read_file("C:/Git/APU/Lab2/apu2.ahp")
ahpFileImport  <- read_file("apu2.ahp")
file.create("apu2.ahp")
ahpFileImport  <- read_file("apu2.ahp")
ahpFileImport  <- read_file("apu2.ahp")
ahpData = ahp::Load(ahpFileImport)
ahp::Calculate(ahpData)
ahpData = ahp::Load(ahpFileImport)
ahpData <- ahp::Load(ahpFileImport)
ahpData <- ahp::Load(ahpFileImport)
ahp::Calculate(ahpData)
ahpFileImport = system.file("extdata", "apu2.ahp", package="ahp")
ahpFileImport = system.file("extdata", "apu2.ahp")
ahpFileImport = system.file("apu2.ahp")
ahpData <- ahp::Load(ahpFileImport)
ahpFileImport  <- read_file("apu2.ahp")
ahpData <- ahp::Load(ahpFileImport)
ahpData <- ahp::Load(as.character(ahpFileImport))
ahpFileImport  <- as.character(read_file("apu2.ahp"))
ahpData <- ahp::Load(ahpFileImport)
ahpFile <- system.file("extdata", "dane.ahp", package="ahp")
daneAhp <- Load(ahpFile)
ahpFile <- system.file("extdata", "dane.ahp", package="ahp")
daneAhp <- Load(ahpFile)
ahpFile <- system.file("extdata", "apu2.ahp", package="ahp")
daneAhp <- Load(ahpFile)
daneAhp <- Load("apu2.ahp")
Analyze(daneAhp)
ahpFile <- system.file("extdata", "apu2.ahp", package="ahp")
cat(readChar(ahpFile, file.info(ahpFile)$size))
library(ahp)
library(data.tree)
library(formattable)
library(DiagrammeR)
library(readr)
ahpFile <- system.file("extdata", "apu2.ahp", package="ahp")
cat(readChar(ahpFile, file.info(ahpFile)$size))
daneAhp <- Load("apu2.ahp")
Calculate(daneAhp)
Analyze(daneAhp)
AnalyzeTable(daneAhp)
PrioritiesFromPairwiseMatrixMeanNormalization(daneAhp)
library(ahp)
library(data.tree)
library(formattable)
library(DiagrammeR)
library(readr)
ahpFile <- system.file("extdata", "apu2.ahp", package="ahp")
cat(readChar(ahpFile, file.info(ahpFile)$size))
daneAhp <- Load("apu2.ahp")
Calculate(daneAhp)
Analyze(daneAhp)
AnalyzeTable(daneAhp)
PrioritiesFromPairwiseMatrixMeanNormalization(daneAhp)
ahpFile <- system.file("extdata", "apu2.ahp", package="ahp")
cat(readChar(ahpFile, file.info(ahpFile)$size))
daneAhp <- Load("apu2.ahp")
Calculate(daneAhp)
Analyze(daneAhp)
AnalyzeTable(daneAhp)
ahpFile <- system.file("extdata", "apu2.ahp", package="ahp")
cat(readChar(ahpFile, file.info(ahpFile)$size))
daneAhp <- Load("apu2.ahp")
Calculate(daneAhp)
Analyze(daneAhp)
AnalyzeTable(daneAhp)
PrioritiesFromPairwiseMatrixMeanNormalization(daneAhp)
ahpFile <- system.file("extdata", "apu2.ahp", package="ahp")
ahpData <- Load("apu2.ahp")
Calculate(ahpData)
Analyze(ahpData)
AnalyzeTable(ahpData)
AnalyzeTable(ahpData)
AnalyzeTable(ahpData)
library(neuralnet)
#x ∈ [1; 10]
input <-  as.data.frame(runif(1000, min=1, max=10))
#f(x) = x^2 + e^−x
output <- input^2 + exp(1)^(-input)
#Po laaczenie danych wejsciowych i wyjsciowych
trainingdata <- cbind(input,output)
colnames(trainingdata) <- c("Wejscie","Wyjscie")
#Trenowanie sieci neuronowej
net.sqrt <- neuralnet(Wyjscie~Wejscie,trainingdata, hidden=7, threshold=0.01, stepmax=1e7)
#Trenowanie sieci neuronowej
net.sqrt <- neuralnet(Wyjscie~Wejscie,trainingdata, hidden=7, threshold=0.01, stepmax=1e7)
print(net.sqrt)
plot(net.sqrt, rep = "best")
#Prognozowanie z pomoca˛ sieci neuronowej
testdata <- as.data.frame(runif(300, min=1, max=10))
net.results <- compute(net.sqrt, testdata)
print(net.results$net.result)
cleanoutput <- cbind(testdata,log(testdata^2), as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Wejscie","Oczekiwane Wyjscie","Wyjscie sieci neuronowej")
print(cleanoutput)
#Wariant 5
df <- read.csv("C:\\Git\\APU\\Lab3\\ramka.csv")
pojemność <- df[["pojemność"]]
cena <- df[["cena"]]
compare.trainingdata <- cbind(pojemnosc, cena)
scaled.pojemnosc <- as.data.frame(scale(pojemnosc))
trainingdata <- cbind(scaled.pojemnosc, cena)
colnames(trainingdata) <- c("Pojemnosc", "Cena")
#(error ≤ 100 z l)
net.price <- neuralnet(Cena~Pojemnosc,trainingdata, hidden<-c(7,1), threshold<-100, lifesign <- "full")
plot(net.price)
testdata <- data.frame(c(20,130))
scaled.testdata <- as.data.frame(scale(testdata))
net.results <- compute(net.price, scaled.testdata)
fixed_cena <- cbind(testdata, as.data.frame(net.results$net.result))
colnames(fixed_cena) <- c("Pojemnosc", "Cena")
print(fixed_cena)
#Wariant 5
df <- read.csv("C:\\Git\\APU\\Lab3\\ramka.csv")
pojemność <- df[["pojemność"]]
cena <- df[["cena"]]
compare.trainingdata <- cbind(pojemnosc, cena)
scaled.pojemnosc <- as.data.frame(scale(pojemnosc))
trainingdata <- cbind(scaled.pojemnosc, cena)
colnames(trainingdata) <- c("Pojemnosc", "Cena")
#(error ≤ 100 z l)
net.price <- neuralnet(Cena~Pojemnosc,trainingdata, hidden<-c(7,1), threshold<-100, lifesign <- "full")
plot(net.price)
testdata <- data.frame(c(20,130))
scaled.testdata <- as.data.frame(scale(testdata))
net.results <- compute(net.price, scaled.testdata)
fixed_cena <- cbind(testdata, as.data.frame(net.results$net.result))
colnames(fixed_cena) <- c("Pojemnosc", "Cena")
print(fixed_cena)
print(net.sqrt)
plot(net.sqrt, rep = "best")
